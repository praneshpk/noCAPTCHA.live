{"version":3,"sources":["webpack:///./src/components/arrow-button/index.module.scss","webpack:///./src/components/arrow-button/index.js","webpack:///./src/components/logo/index.js","webpack:///./src/components/twitch-player.js","webpack:///./src/components/video-grid/index.js","webpack:///./src/pages/index.js","webpack:///./src/components/logo/index.module.scss","webpack:///./src/components/video-grid/index.module.scss"],"names":["module","exports","ArrowButton","variant","onClick","href","fixed","children","className","styles","root","Logo","useState","c","setC","egg","greenText","alt","TwitchPlayer","anchor","document","body","dark","mute","player","useRef","embed","setEmbed","useEffect","window","playerContainer","current","script","createElement","src","async","addEventListener","Twitch","Embed","width","height","channel","theme","appendChild","removeChild","innerHTML","setMuted","ref","id","style","maxWidth","maxHeight","VideoGrid","grid","title","frameborder","allow","allowfullscreen","IndexPage","twitch","setTwitch","videoGrid","setVideoGrid","darkMode","setDarkMode","audio","sw","setAudio","values","location","hash","search","renderScreen","useMemo"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,KAAO,4BAA4B,KAAO,4BAA4B,QAAU,+BAA+B,MAAQ,+B,+HCE1H,SAASC,EAAT,GAMX,IAAD,IALCC,eAKD,MALW,GAKX,EAJCC,EAID,EAJCA,QAID,IAHCC,YAGD,MAHQ,IAGR,MAFCC,aAED,SADCC,EACD,EADCA,SAEA,OACI,uBACIF,KAAMA,EACNG,UAAcC,IAAOC,KAAZ,IAAoBD,IAAON,GAA3B,KACLG,EAAQG,IAAOH,MAAQ,KAG3B,yBAAKF,QAASA,GAAUG,I,qCCdrB,SAASI,EAAT,GAA4D,IAA5CR,EAA2C,EAA3CA,QAA2C,IAAlCC,eAAkC,MAAxB,aAAwB,MAAdC,YAAc,MAAP,IAAO,EACtE,EAAkBO,mBAAS,GAApBC,EAAP,KAAUC,EAAV,KACMC,EACF,0BAAMP,UAAWC,IAAOO,WAAxB,yVAaJ,OACI,yBAAKR,UAAWC,IAAOC,KAAMN,QALb,WAChBA,IACAU,EAAKD,EAAI,KAIJA,EAAI,GACD,uBAAGL,UAAWC,IAAON,GAAUE,KAAMA,GACjC,yBAAKY,IAAI,eAGbF,G,gBCxBD,SAASG,EAAT,GAIX,IAAD,IAHCC,cAGD,MAHUC,SAASC,KAGnB,MAFCC,YAED,aADCC,YACD,SACOC,EAASC,mBACf,EAA0Bb,qBAAnBc,EAAP,KAAcC,EAAd,KA8BA,OA7BAC,qBAAU,WACN,GAAI,oBAAOC,OAAwB,CAC/B,IAAMC,EAAkBN,EAAOO,QACzBC,EAASZ,SAASa,cAAc,UAetC,OAdAD,EAAOE,IAAP,0CACAF,EAAOG,OAAQ,EACfH,EAAOI,iBAAiB,QAAQ,WAC5BT,EACI,IAAIE,OAAOQ,OAAOC,MAAM,eAAgB,CACpCC,MAAO,OACPC,OAAQ,OACRC,QAAS,iBACTC,MAAOpB,EAAO,OAAS,cAInCH,EAAOwB,YAAYX,GAEZ,WACHb,EAAOyB,YAAYZ,GACnBF,EAAgBe,UAAY,OAGrC,CAAC1B,EAAQG,IACZM,qBAAU,WACFF,GACAA,EAAMoB,SAASvB,KAEpB,CAACG,EAAOH,IAEP,oCACI,yBACIwB,IAAKvB,EACLwB,GAAG,eACHC,MAAO,CACHC,SAAU,SACVX,MAAO,OACPC,OAAQ,OACRW,UAAW,a,yBC5ChB,SAASC,IACpB,OACI,yBAAK5C,UAAWC,IAAO4C,MACnB,4BACInB,IAAI,4CACJoB,MAAM,uBACNC,YAAY,IACZC,MAAM,iFACNC,iBAAe,IAEnB,4BACIvB,IAAI,4CACJoB,MAAM,uBACNC,YAAY,IACZC,MAAM,iFACNC,iBAAe,IAEnB,4BACIvB,IAAI,4CACJoB,MAAM,uBACNC,YAAY,IACZC,MAAM,iFACNC,iBAAe,KCjBhB,SAASC,IACpB,IAAMhD,EAAOe,mBACb,EAA4Bb,oBAAS,GAA9B+C,EAAP,KAAeC,EAAf,KACA,EAAkChD,oBAAS,GAApCiD,EAAP,KAAkBC,EAAlB,KACA,EAAgClD,mBAAS,GAAlCmD,EAAP,KAAiBC,EAAjB,KACA,EAA0BpD,mBAAS,GAA5BqD,EAAP,KAEMC,EAAK,CACPF,cACAG,SAJJ,KAKIC,OAAQ,CAAEL,WAAUE,UAGxBrC,qBAAU,WACF,oBAAOC,SACP+B,EAC6B,YAAzB/B,OAAOwC,SAASC,MACe,QAA3BzC,OAAOwC,SAASE,QAExBT,EAC6B,UAAzBjC,OAAOwC,SAASC,MACe,UAA3BzC,OAAOwC,SAASE,WAG7B,IAEH,IAAMC,EAAeC,mBAAQ,WACzB,OAAId,EAEI,oCACI,kBAACzD,EAAD,CACIC,QAAQ,OACRC,QAAS,WACLwD,GAAU,KAHlB,QAQA,kBAAC1C,EAAD,CACIC,OAAQT,EAAKqB,QACbT,KAAMyC,EACNxC,KAAM0C,KAKlBJ,EAEI,oCACI,kBAAC3D,EAAD,CACIC,QAAQ,OACRC,QAAS,WACL0D,GAAa,IAEjBxD,OAAK,GALT,QASA,kBAAC8C,EAAD,OAKR,kBAACzC,EAAD,CACIR,QAAQ,OACRC,QAAS,WACL0D,GAAa,IAEjBzD,KAAK,YAGd,CAACsD,EAAQE,IAEZ,OACI,kBAAC,IAAD,CAAQd,IAAKrC,EAAMwD,GAAIA,GACnB,kBAAC,IAAD,CAAKZ,MAAM,sBACVkB,K,qBCnFbxE,EAAOC,QAAU,CAAC,UAAY,iCAAiC,KAAO,4BAA4B,KAAO,4BAA4B,KAAO,4BAA4B,WAAa,qC,qBCArLD,EAAOC,QAAU,CAAC,KAAO","file":"component---src-pages-index-js-574e1f5283c7e636a99e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"index-module--root--2kLyg\",\"back\":\"index-module--back--Z4mqE\",\"forward\":\"index-module--forward--SdJ5L\",\"fixed\":\"index-module--fixed--2tUga\"};","import React from 'react';\nimport styles from './index.module.scss';\n\nexport default function ArrowButton({\n    variant = '',\n    onClick,\n    href = '#',\n    fixed = false,\n    children\n}) {\n    return (\n        <a\n            href={href}\n            className={`${styles.root} ${styles[variant]} ${\n                fixed ? styles.fixed : ''\n            }`}\n        >\n            <div onClick={onClick}>{children}</div>\n        </a>\n    );\n}\n","import React, { useState } from 'react';\nimport styles from './index.module.scss';\n\nexport default function Logo({ variant, onClick = () => {}, href = '#' }) {\n    const [c, setC] = useState(0);\n    const egg = (\n        <code className={styles.greenText}>\n            01000110 01110101 01100011 01101011 00100000 01111001 01101111\n            01110101 00101110 00100000 01010011 01110100 01101111 01110000\n            00100000 01101101 01100101 01110011 01110011 01101001 01101110\n            01100111 00100000 01110111 01101001 01110100 01101000 00100000\n            01101101 01111001 00100000 01110111 01100101 01100010 01110011\n            01101001 01110100 01100101\n        </code>\n    );\n    const handleClick = () => {\n        onClick();\n        setC(c + 1);\n    };\n    return (\n        <div className={styles.root} onClick={handleClick}>\n            {c < 64 ? (\n                <a className={styles[variant]} href={href}>\n                    <div alt=\"noCAPTCHA\" />\n                </a>\n            ) : (\n                egg\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nexport default function TwitchPlayer({\n    anchor = document.body,\n    dark = true,\n    mute = false\n}) {\n    const player = useRef();\n    const [embed, setEmbed] = useState();\n    useEffect(() => {\n        if (typeof window !== `undefined`) {\n            const playerContainer = player.current;\n            const script = document.createElement('script');\n            script.src = `https://player.twitch.tv/js/embed/v1.js`;\n            script.async = true;\n            script.addEventListener('load', () => {\n                setEmbed(\n                    new window.Twitch.Embed('twitch-embed', {\n                        width: '100%',\n                        height: '100%',\n                        channel: 'nocaptcha_live',\n                        theme: dark ? 'dark' : 'light'\n                    })\n                );\n            });\n            anchor.appendChild(script);\n\n            return () => {\n                anchor.removeChild(script);\n                playerContainer.innerHTML = '';\n            };\n        }\n    }, [anchor, dark]);\n    useEffect(() => {\n        if (embed) {\n            embed.setMuted(mute);\n        }\n    }, [embed, mute]);\n    return (\n        <>\n            <div\n                ref={player}\n                id=\"twitch-embed\"\n                style={{\n                    maxWidth: '1920px',\n                    width: '88vw',\n                    height: '88vh',\n                    maxHeight: '1080px'\n                }}\n            ></div>\n        </>\n    );\n}\n","import React from 'react';\nimport styles from './index.module.scss';\n\nexport default function VideoGrid() {\n    return (\n        <div className={styles.grid}>\n            <iframe\n                src=\"https://www.youtube.com/embed/vVdD1VjbOLA\"\n                title=\"YouTube video player\"\n                frameborder=\"0\"\n                allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n            ></iframe>\n            <iframe\n                src=\"https://www.youtube.com/embed/JpiCDKT5pkQ\"\n                title=\"YouTube video player\"\n                frameborder=\"0\"\n                allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n            ></iframe>\n            <iframe\n                src=\"https://www.youtube.com/embed/TreyAVcZmtk\"\n                title=\"YouTube video player\"\n                frameborder=\"0\"\n                allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n            ></iframe>\n        </div>\n    );\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport ArrowButton from '../components/arrow-button';\nimport Layout from '../components/layout';\nimport Logo from '../components/logo';\nimport SEO from '../components/seo';\nimport TwitchPlayer from '../components/twitch-player';\nimport VideoGrid from '../components/video-grid';\n\nexport default function IndexPage() {\n    const root = useRef();\n    const [twitch, setTwitch] = useState(false);\n    const [videoGrid, setVideoGrid] = useState(false);\n    const [darkMode, setDarkMode] = useState(1);\n    const [audio, setAudio] = useState(1);\n\n    const sw = {\n        setDarkMode,\n        setAudio,\n        values: { darkMode, audio }\n    };\n\n    useEffect(() => {\n        if (typeof window !== `undefined`) {\n            setTwitch(\n                window.location.hash === '#twitch' ||\n                    window.location.search === '?tw'\n            );\n            setVideoGrid(\n                window.location.hash === '#past' ||\n                    window.location.search === '?past'\n            );\n        }\n    }, []);\n\n    const renderScreen = useMemo(() => {\n        if (twitch) {\n            return (\n                <>\n                    <ArrowButton\n                        variant=\"back\"\n                        onClick={() => {\n                            setTwitch(false);\n                        }}\n                    >\n                        Home\n                    </ArrowButton>\n                    <TwitchPlayer\n                        anchor={root.current}\n                        dark={darkMode}\n                        mute={audio}\n                    />\n                </>\n            );\n        }\n        if (videoGrid) {\n            return (\n                <>\n                    <ArrowButton\n                        variant=\"back\"\n                        onClick={() => {\n                            setVideoGrid(false);\n                        }}\n                        fixed\n                    >\n                        Home\n                    </ArrowButton>\n                    <VideoGrid />\n                </>\n            );\n        }\n        return (\n            <Logo\n                variant=\"logo\"\n                onClick={() => {\n                    setVideoGrid(true);\n                }}\n                href=\"#past\"\n            />\n        );\n    }, [twitch, videoGrid]);\n\n    return (\n        <Layout ref={root} sw={sw}>\n            <SEO title=\"i am not a robot.\" />\n            {renderScreen}\n            {/* <marquee>\n                {posts.map(({ attributes }) => (\n                    <>\n                        <b>{attributes.title}: </b>\n                        <span>{attributes.content}</span>\n                    </>\n                ))}\n            </marquee> */}\n        </Layout>\n    );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"greenText\":\"index-module--greenText--1m09g\",\"root\":\"index-module--root--363CI\",\"text\":\"index-module--text--Crddu\",\"logo\":\"index-module--logo--3PlfJ\",\"colorCycle\":\"index-module--color-cycle--TimLx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"index-module--grid--3Cwbx\"};"],"sourceRoot":""}